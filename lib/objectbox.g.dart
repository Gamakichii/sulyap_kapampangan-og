// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/quiz_question.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2567772409813572764),
      name: 'QuizQuestion',
      lastPropertyId: const obx_int.IdUid(6, 3853078632151339838),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8995692531439114757),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2992226430453470205),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3201795911684645459),
            name: 'choices',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5458515320448685971),
            name: 'correctAnswer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5735661569945533233),
            name: 'difficulty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3853078632151339838),
            name: 'imagePath',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 2567772409813572764),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    QuizQuestion: obx_int.EntityDefinition<QuizQuestion>(
        model: _entities[0],
        toOneRelations: (QuizQuestion object) => [],
        toManyRelations: (QuizQuestion object) => {},
        getId: (QuizQuestion object) => object.id,
        setId: (QuizQuestion object, int id) {
          object.id = id;
        },
        objectToFB: (QuizQuestion object, fb.Builder fbb) {
          final questionOffset = object.question == null
              ? null
              : fbb.writeString(object.question!);
          final choicesOffset = object.choices == null
              ? null
              : fbb.writeList(
                  object.choices!.map(fbb.writeString).toList(growable: false));
          final correctAnswerOffset = fbb.writeString(object.correctAnswer);
          final difficultyOffset = fbb.writeString(object.difficulty);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addOffset(2, choicesOffset);
          fbb.addOffset(3, correctAnswerOffset);
          fbb.addOffset(4, difficultyOffset);
          fbb.addOffset(5, imagePathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final choicesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8);
          final correctAnswerParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final difficultyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = QuizQuestion(
              question: questionParam,
              choices: choicesParam,
              correctAnswer: correctAnswerParam,
              difficulty: difficultyParam,
              imagePath: imagePathParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [QuizQuestion] entity fields to define ObjectBox queries.
class QuizQuestion_ {
  /// See [QuizQuestion.id].
  static final id =
      obx.QueryIntegerProperty<QuizQuestion>(_entities[0].properties[0]);

  /// See [QuizQuestion.question].
  static final question =
      obx.QueryStringProperty<QuizQuestion>(_entities[0].properties[1]);

  /// See [QuizQuestion.choices].
  static final choices =
      obx.QueryStringVectorProperty<QuizQuestion>(_entities[0].properties[2]);

  /// See [QuizQuestion.correctAnswer].
  static final correctAnswer =
      obx.QueryStringProperty<QuizQuestion>(_entities[0].properties[3]);

  /// See [QuizQuestion.difficulty].
  static final difficulty =
      obx.QueryStringProperty<QuizQuestion>(_entities[0].properties[4]);

  /// See [QuizQuestion.imagePath].
  static final imagePath =
      obx.QueryStringProperty<QuizQuestion>(_entities[0].properties[5]);
}
